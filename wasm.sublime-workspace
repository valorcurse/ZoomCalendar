{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"verti",
				"verticesSize"
			],
			[
				"tr",
				"triangleVertices"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include <exception>\n#include <functional>\n#include <vector>\n#include <iostream>\n\n#ifdef __EMSCRIPTEN__\n\n#include <emscripten.h>\n#include <SDL.h>\n#include <SDL_image.h>\n#include <SDL_ttf.h>\n\n#define GL_GLEXT_PROTOTYPES 1\n    #include <SDL_opengles2.h>\n#else\n    #include <SDL2/SDL.h>\n\n#define GL_GLEXT_PROTOTYPES 1\n    #include <SDL2/SDL_opengles2.h>\n\n#endif\n\n// Shader sources\nconst GLchar* vertexSource =\n\"attribute vec4 position;    \\n\"\n\"void main()                  \\n\"\n\"{                            \\n\"\n\"   gl_Position = vec4(position.xyz, 1.0);  \\n\"\n\"}                            \\n\";\nconst GLchar* fragmentSource =\n\"precision mediump float;\\n\"\n\"void main()                                  \\n\"\n\"{                                            \\n\"\n\"  gl_FragColor = vec4 (1.0, 1.0, 1.0, 1.0 );\\n\"\n\"}                                            \\n\";\n\nconst int SCREEN_WIDTH = 640;\nconst int SCREEN_HEIGHT = 480;\n//The window we'll be rendering to\nSDL_Window* gWindow = NULL;\n\n//The window renderer\nSDL_Renderer* gRenderer = NULL;\n\nbool init()\n{ \n    //Initialization flag\n    bool success = true;\n\n    //Initialize SDL\n    if( SDL_Init( SDL_INIT_VIDEO ) < 0 )\n    {\n        printf( \"SDL could not initialize! SDL Error: %s\\n\", SDL_GetError() );\n        success = false;\n    }\n    else\n    {\n        //Set texture filtering to linear\n        if( !SDL_SetHint( SDL_HINT_RENDER_SCALE_QUALITY, \"1\" ) )\n        {\n            printf( \"Warning: Linear texture filtering not enabled!\" );\n        }\n\n        //Create window\n        gWindow = SDL_CreateWindow( \"SDL Tutorial\", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );\n        if( gWindow == NULL )\n        {\n            printf( \"Window could not be created! SDL Error: %s\\n\", SDL_GetError() );\n            success = false;\n        }\n        else\n        {\n            //Create renderer for window\n            gRenderer = SDL_CreateRenderer( gWindow, -1, SDL_RENDERER_ACCELERATED );\n            if( gRenderer == NULL )\n            {\n                printf( \"Renderer could not be created! SDL Error: %s\\n\", SDL_GetError() );\n                success = false;\n            }\n            else\n            {\n                //Initialize renderer color\n                SDL_SetRenderDrawColor( gRenderer, 0xFF, 0xFF, 0xFF, 0xFF );\n\n                //Initialize PNG loading\n                int imgFlags = IMG_INIT_PNG;\n                if( !( IMG_Init( imgFlags ) & imgFlags ) )\n                {\n                    printf( \"SDL_image could not initialize! SDL_image Error: %s\\n\", IMG_GetError() );\n                    success = false;\n                }\n            }\n        }\n    }\n\n    return success;\n}\n\nstd::function<void()> loop;\nvoid main_loop() { loop(); }\n\nint main(int argc, char** argv) {\n    // SDL_Init(SDL_INIT_VIDEO);\n    init();\n\n    loop = [&]\n    {\n\n        //Main loop flag\n        bool quit = false;\n\n        //Event handler\n        SDL_Event e;\n\n        //Handle events on queue\n        while( SDL_PollEvent( &e ) != 0 )\n        {\n            //User requests quit\n            if( e.type == SDL_QUIT )\n            {\n                quit = true;\n            }\n        }\n\n        //Clear screen\n        SDL_SetRenderDrawColor( gRenderer, 0xFF, 0xFF, 0xFF, 0xFF );\n        SDL_RenderClear( gRenderer );\n\n        //Render red filled quad\n        SDL_Rect fillRect = { SCREEN_WIDTH / 4, SCREEN_HEIGHT / 4, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 };\n        SDL_SetRenderDrawColor( gRenderer, 0xFF, 0x00, 0x00, 0xFF );        \n        SDL_RenderFillRect( gRenderer, &fillRect );\n\n        //Render green outlined quad\n        SDL_Rect outlineRect = { SCREEN_WIDTH / 6, SCREEN_HEIGHT / 6, SCREEN_WIDTH * 2 / 3, SCREEN_HEIGHT * 2 / 3 };\n        SDL_SetRenderDrawColor( gRenderer, 0x00, 0xFF, 0x00, 0xFF );        \n        SDL_RenderDrawRect( gRenderer, &outlineRect );\n        \n        //Draw blue horizontal line\n        SDL_SetRenderDrawColor( gRenderer, 0x00, 0x00, 0xFF, 0xFF );        \n        SDL_RenderDrawLine( gRenderer, 0, SCREEN_HEIGHT / 2, SCREEN_WIDTH, SCREEN_HEIGHT / 2 );\n\n        //Draw vertical line of yellow dots\n        SDL_SetRenderDrawColor( gRenderer, 0xFF, 0xFF, 0x00, 0xFF );\n        for( int i = 0; i < SCREEN_HEIGHT; i += 4 )\n        {\n            SDL_RenderDrawPoint( gRenderer, SCREEN_WIDTH / 2, i );\n        }\n\n        //Update screen\n        SDL_RenderPresent( gRenderer );\n    };\n\n    #ifdef __EMSCRIPTEN__\n    emscripten_set_main_loop(main_loop, 0, true);\n    #else\n    while(true) main_loop();\n    #endif\n\n    return 0;\n}\n",
			"file": "main.cpp",
			"file_size": 4552,
			"file_write_time": 131444139762619559,
			"settings":
			{
				"buffer_size": 4553,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 366,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "wasm.sublime-project",
			"settings":
			{
				"buffer_size": 713,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/marcelo/Downloads/08_geometry_rendering/08_geometry_rendering.cpp",
			"settings":
			{
				"buffer_size": 4700,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 257.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 431.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/marcelo/Repositories/wasm"
	],
	"file_history":
	[
		"/home/marcelo/Repositories/wasm/wasm.sublime-project",
		"/home/marcelo/Repositories/wasm/sfml.cpp"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"=",
			"PATH",
			"+=",
			"0.5f"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4553,
						"regions":
						{
						},
						"selection":
						[
							[
								1046,
								1046
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 609.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 366,
						"regions":
						{
						},
						"selection":
						[
							[
								56,
								56
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "wasm.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 713,
						"regions":
						{
						},
						"selection":
						[
							[
								149,
								149
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 51.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/marcelo/Downloads/08_geometry_rendering/08_geometry_rendering.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4700,
						"regions":
						{
						},
						"selection":
						[
							[
								699,
								582
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 126.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.520454545455,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 156.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "wasm.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 160.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
